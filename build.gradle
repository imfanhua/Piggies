import org.apache.tools.ant.filters.ReplaceTokens

plugins {
	id "java-library"
	id "maven-publish"
	id "org.jetbrains.kotlin.jvm" version "${kotlin_version}"
	id "org.jetbrains.kotlin.plugin.serialization" version "${kotlin_version}"
}

group = project.group
version = project.version

archivesBaseName = "${project.name}-api"

sourceSets {
	main.kotlin.srcDirs += 'src/main/kotlin'
}

repositories {
	mavenCentral()
	maven { url = 'https://repo.papermc.io/repository/maven-public/' }
}

kotlin {
	jvmToolchain {
		languageVersion.set JavaLanguageVersion.of(17)
	}
}

dependencies {
	compileOnly "io.papermc.paper:paper-api:$bukkit_version"

	implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
	implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

	implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
	implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:$coroutines_version"
	implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$coroutines_version"

	implementation "org.jetbrains.kotlinx:kotlinx-serialization-core-jvm:$serialization_version"
	implementation "org.jetbrains.kotlinx:kotlinx-serialization-json-jvm:$serialization_version"
	implementation "org.jetbrains.kotlinx:kotlinx-serialization-cbor-jvm:$serialization_version"

	implementation "org.jetbrains.kotlinx:atomicfu-jvm:$atomicfu_version"
	implementation "org.jetbrains.kotlinx:kotlinx-datetime-jvm:$datetime_version"
}

jar {}

java {
	withSourcesJar()
	withJavadocJar()
}

processResources {
	duplicatesStrategy DuplicatesStrategy.INCLUDE
	from ("${project.rootDir}/src/main/resources") {
		filter ReplaceTokens, tokens: [
				"VERSION": project.version,
				"VERSION:KOTLIN": kotlin_version,
				"VERSION:COROUTINES": coroutines_version,
				"VERSION:SERIALIZATION": serialization_version,
				"VERSION:ATOMICFU": atomicfu_version,
				"VERSION:DATETIME": datetime_version,
		]
	}
}

task buildMain(dependsOn: jar, type: Jar) {
	from {
		jar.outputs.files.collect { it.isDirectory() ? it : zipTree(it) }
	}
	duplicatesStrategy DuplicatesStrategy.EXCLUDE
	from {
		configurations.runtimeClasspath
				.collect { it.isDirectory() ? it : zipTree(it) }
	} {
		exclude "META-INF/.SF"
		exclude "META-INF/.DSA"
		exclude "META-INF/*.RSA"
	}
	archiveFileName = "${project.name}-${project.version}.jar"
}

artifacts {
	archives buildMain
}

publishing {
	publications {
		maven(MavenPublication) {
			from components.java
		}
	}
}